from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
import logging
import asyncio
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import psycopg
from aiogram.filters import CommandStart, Command
from datetime import datetime
from aiogram.types import BotCommand, BotCommandScopeDefault
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import time
BOT_TOKEN = '6785002507:AAEVPYCeB_GLYQ8SOqMMBAqXCDUn7nVQhGM'
conn = psycopg.connect("dbname=tgnotify user=postgres password=123")
def reply_keyboard():
    keyboard_builder = ReplyKeyboardBuilder()
    keyboard_builder.button(text='üéØ–ú–µ–Ω—é')
    keyboard_builder.button(text='üîî–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∏–µ')
    keyboard_builder.button(text='üìù–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    keyboard_builder.button(text='üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    keyboard_builder.adjust(2)
    return keyboard_builder.as_markup(resize_keyboard=True, one_time_keyboard=False, selective=True)
class StepsForm(StatesGroup):
    GET_NOTICE = State()
    DEL_NOTICE = State()
async def menu_button(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö! üìù\n\n\
–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n\
üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–∞—Ç–æ–π, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å. –Ø –ø–æ–º–Ω—é –≤—Å–µ!\n\n\
üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", –∏ —è –ø–µ—Ä–µ–¥–∞–º —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫.\n\n\
üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏–ª, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å, –∏ —è —Å–¥–µ–ª–∞—é —ç—Ç–æ.!!',reply_markup=reply_keyboard())
async def set_commands(bot: Bot):
    commands = [
        BotCommand(
            command="start",
            description = '–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã'
        ),
        BotCommand(
            command="menu",
            description = '–ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é'
        ),
        BotCommand(
            command="addnotice",
            description='–¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
        ),
        BotCommand(
            command="list",
            description='–æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'
        ),
        BotCommand(
            command="delete",
            description='—É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
        ),
        ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
async def on_startup(bot: Bot):
    await set_commands(bot)
async def notice_me(bot: Bot):
    cur = conn.execute("SELECT telegramid, datetime, name FROM schedule")
    data0 = cur.fetchall()
    u = len(data0)
    for i in range(0, u):
        data = data0[i]
        tg_id = data[0]
        date = data[1]
        text = data[2]
        if date.date() == datetime.now().date():
            await bot.send_message(chat_id=tg_id, text=text)
async def welcome_message(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö! üìù\n\n\
–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n\
üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–∞—Ç–æ–π, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å. –Ø –ø–æ–º–Ω—é –≤—Å–µ!\n\n\
üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", –∏ —è –ø–µ—Ä–µ–¥–∞–º —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫.\n\n\
üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏–ª, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å, –∏ —è —Å–¥–µ–ª–∞—é —ç—Ç–æ.!!', reply_markup=reply_keyboard())

async def create_notice(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —Ç–µ–∫—Å—Ç), –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å. –Ø –ø–æ–º–Ω—é –≤—Å–µ!')
    await state.set_state(StepsForm.GET_NOTICE)
async def continue_creating(message: Message, state: FSMContext):
    tgid = message.from_user.id
    text = message.text.split(' ', 1)[-1]
    dateString = message.text.split(' ', 1)[0]
    date = datetime.strptime(dateString, '%d.%m.%Y')
    cur = conn.execute("INSERT INTO schedule (telegramid, datetime, name) VALUES (%s, %s, %s)", (tgid, date, text))
    await message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ —Å–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!')
    await state.clear()
    conn.commit()
# async def finish_creating(message: Message, state:)
#     data = '05 Dec 2000'
#     cur = conn.cursor("INSERT INTO SCHEDULE (datetime) VALUES (%s) to_timestamp(data, 'DD Mon YYYY')")
#     conn.commit()
async def delete_notice(message: Message, state: FSMContext):
    cur = conn.execute('SELECT * FROM schedule WHERE telegramid =%s', (message.from_user.id,))
    data1 = cur.fetchone()
    if data1 is None:
        await message.answer(
            '–ü—Ä–æ—Å—Ç–∏—Ç–µ —É –≤–∞—Å –ø–æ–∫–∞, —á—Ç–æ –Ω–µ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π! –ù–æ –≤—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏—Ö, –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é!')
        return
    cur = conn.execute("SELECT id, datetime, name FROM schedule WHERE telegramid =%s", (message.from_user.id,))
    data0 = cur.fetchall()
    u = len(data0)
    text = f'üëã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ id,date,text: \n'
    for i in range(0, u):
        data = data0[i]
        id = data[0]
        date = data[1]
        name = data[2]
        text1 = f'{text}\n{id} | {date.date()} | {name}'
        text = text1
    await message.answer(
        f'{text1} \n\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å!')
    text1 = str()
    text = str()
    await state.set_state(StepsForm.DEL_NOTICE)

async def continue_deletion(message: Message, state: FSMContext):
    cur = conn.execute('DELETE FROM schedule WHERE id =%s', (message.text,))
    await message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    conn.commit()
    await state.clear()
async def get_notices(message: Message):
    cur = conn.execute('SELECT * FROM schedule WHERE telegramid =%s', (message.from_user.id,))
    data1 = cur.fetchone()
    if data1 is None:
        await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ —É –≤–∞—Å –ø–æ–∫–∞, —á—Ç–æ –Ω–µ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π! –ù–æ –≤—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏—Ö, –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é!')
        return
    cur = conn.execute("SELECT id, datetime, name FROM schedule WHERE telegramid =%s", (message.from_user.id,))
    data0 = cur.fetchall()
    u = len(data0)
    text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! üëã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ id,date,text: \n'
    for i in range(0, u):
        data=data0[i]
        id = data[0]
        date = data[1]
        name = data[2]
        dateString = date.strftime('%d.%m.%Y')
        text1 = f'{text}\n{id} | {dateString} | {name}'
        text = text1
    await message.answer(f'{text1} \n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é. –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ü§ñ ')
    text1=str()
    text=str()
async def start():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    bot = Bot(token=BOT_TOKEN)
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(notice_me, trigger='cron', hour='*',
                    start_date=datetime.now(), kwargs={'bot': bot})
    scheduler.start()

    dp = Dispatcher()
    dp.message.register(welcome_message, CommandStart())
    dp.startup.register(on_startup)
    dp.message.register(get_notices, F.text == 'üìù–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    dp.message.register(get_notices, Command(commands='list'))
    dp.message.register(menu_button, F.text == 'üéØ–ú–µ–Ω—é')
    dp.message.register(menu_button, Command(commands='menu'))
    dp.message.register(create_notice, F.text == 'üîî–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∏–µ')
    dp.message.register(create_notice, Command(commands="addnotice"))
    dp.message.register(continue_creating, StepsForm.GET_NOTICE)
    dp.message.register(delete_notice, F.text == 'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    dp.message.register(delete_notice, Command(commands="deletenotice"))
    dp.message.register(continue_deletion, StepsForm.DEL_NOTICE)
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(start())
